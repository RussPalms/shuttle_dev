receivers:
  otlp:
    protocols:
      grpc:
  # The hostmetrics receiver is required to get correct infrastructure metrics in Datadog.
  hostmetrics:
    collection_interval: 10s
    scrapers:
      paging:
        metrics:
          system.paging.utilization:
            enabled: true
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      load:
      memory:
      network:
      processes:
  # The prometheus receiver scrapes metrics needed for the OpenTelemetry Collector Dashboard.
  prometheus/otel:
    config:
      scrape_configs:
        - job_name: "otelcol"
          scrape_interval: 10s
          static_configs:
            - targets: ["0.0.0.0:8888"]
  docker_stats:
    collection_interval: 1m
    container_labels_to_metric_labels:
      shuttle.idle_minutes: shuttle.idle_minutes
      shuttle.project: shuttle.project_name
      shuttle.project_id: shuttle.project_id
      shuttle.prefix: shuttle.prefix

processors:
  batch:
  resourcedetection:
    detectors: [gcp, ecs, ec2, azure, system]
  batch/datadog:
    # Make small enough to be processed by datadog
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/datadogexporter#why-am-i-getting-errors-413---request-entity-too-large-how-do-i-fix-it
    send_batch_max_size: 100
    send_batch_size: 10
    timeout: 10s
  attributes:
    actions:
      - key: env
        value: ${env:SHUTTLE_ENV}
        action: insert
  resource:
    attributes:
      - key: deployment.environment
        action: upsert
        value: ${env:SHUTTLE_ENV}
  # See https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/1909
  # as for why we need that.

exporters:
  datadog:
    api:
      site: datadoghq.eu
      key: ${env:DD_API_KEY}
    traces:
      span_name_as_resource_name: true
      # peer_tags_aggregation: true
  otlp:
    endpoint: "api.honeycomb.io:443"
    headers:
      "x-honeycomb-team": ${env:HONEYCOMB_API_KEY}
  awss3/metrics:
    s3uploader:
        region: 'eu-west-2'
        s3_bucket: 'otel-test-093afe'
        s3_prefix: 'metrics'
        s3_partition: 'minute'

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [attributes, batch/datadog]
      exporters: [datadog, otlp]
    logs:
      receivers: [otlp]
      processors: [attributes, batch/datadog]
      exporters: [datadog, otlp]
    metrics/awss3:
      receivers: [docker_stats]
      processors: [batch, resourcedetection]
      exporters: [awss3/metrics]
    metrics/datadog:
      receivers: [hostmetrics, prometheus/otel, otlp]
      processors: [attributes, batch/datadog]
      exporters: [datadog]
